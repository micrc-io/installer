#!/bin/bash


echo "#######################################"
echo "## Start -- Post install"
echo "#######################################"


# 组织域名称
ORG_DOMAIN=`cat ./owner.config | awk '{if($1 == "ORG_DOMAIN") print $2}'`
# ks console ip
KS_CONSOLE_ADDRESS=`cat ./owner.config | awk '{if($1 == "KS_CONSOLE_ADDRESS") print $2}'`
NET_HTTP_PROXY=`cat ./owner.config | awk '{if($1 == "NET_HTTP_PROXY") print $2}'`
NET_SOCK_PROXY=`cat ./owner.config | awk '{if($1 == "NET_HTTP_PROXY") print $2}'`
IGNORE_PROXY=`cat ./owner.config | awk '{if($1 == "IGNORE_PROXY") print $2}'`


echo "================================修改ks-console eip=============================="
# 配置ks console eip
kubectl patch -n kubesphere-system svc/ks-console --type=json \
  -p="[ \
  {\"op\": \"add\", \"path\": \"/metadata/annotations/lb.kubesphere.io~1v1alpha1\", \"value\": \"openelb\"}, \
  {\"op\": \"add\", \"path\": \"/metadata/annotations/protocol.openelb.kubesphere.io~1v1alpha1\", \"value\": \"layer2\"}, \
  {\"op\": \"add\", \"path\": \"/metadata/annotations/eip.openelb.kubesphere.io~1v1alpha2\", \"value\": \"$ORG_DOMAIN-dev-eip\"}, \
  {\"op\": \"add\", \"path\": \"/spec/loadBalancerIP\", \"value\": \"$KS_CONSOLE_ADDRESS\"}, \
  {\"op\": \"replace\", \"path\": \"/spec/type\", \"value\": \"LoadBalancer\"}
  ]"
echo "=====================================Done.====================================="


echo "==========================修复argocd out of sync问题============================"
# cert-manager Certificate duration和renewBefore不识别导致out of sync
kubectl patch -n argocd configmap argocd-cm --type=json \
  -p="[{\"op\": \"add\", \"path\": \"/data/resource.customizations.ignoreDifferences.cert-manager.io_Certificate\", \"value\": \"jsonPointers:\n- /spec/duration\n- /spec/renewBefore\n\"}]"
echo "===============================Done.============================================"


echo "===============================jenkins agent自定义镜像=========================="
# 自定义ci agent及镜像
kubectl get cm -n kubesphere-devops-system jenkins-casc-config -o json \
  | jq --arg patch "`cat ./config/devops/jenkins_user.yaml`" '.data["jenkins_user.yaml"] = $patch' \
  | kubectl replace -f -

kubectl rollout restart -n kubesphere-devops-system deploy devops-jenkins
echo "=======================================Done.===================================="


echo "=========================创建代理configmap修复github访问========================"
cat <<EOF | kubectl apply -f -
---
apiVersion: v1
kind: ConfigMap
metadata:
 namespace: kube-system
 name: proxy-config
 annotations:
   reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
   reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "argocd,kubesphere-devops-system,kubesphere-devops-worker,micrc-system"
   reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
   reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "argocd,kubesphere-devops-system,kubesphere-devops-worker,micrc-system"
data:
 http_proxy: "$NET_HTTP_PROXY"
 HTTP_PROXY: "$NET_HTTP_PROXY"
 https_proxy: "$NET_HTTP_PROXY"
 HTTPS_PROXY: "$NET_HTTP_PROXY"
 all_proxy: "$NET_SOCK_PROXY"
 ALL_PROXY: "$NET_SOCK_PROXY"
 no_proxy: "$IGNORE_PROXY"
 NO_PROXY: "$IGNORE_PROXY"
EOF

kubectl rollout restart -n kube-system deploy reflector

# devops-argocd-repo-server, devops-jenkins需要代理访问github
kubectl patch -n argocd deployment devops-argocd-repo-server \
  -p '{"spec": {"template": {"spec": {"containers": [{"name": "repo-server", "envFrom": [{ "configMapRef": { "name": "proxy-config" } }]}]}}}}'
kubectl patch -n kubesphere-devops-system deployment  devops-jenkins \
  -p '{"spec": {"template": {"spec": {"containers": [{"name": "devops-jenkins", "envFrom": [{"configMapRef": {"name": "proxy-config"}}]}]}}}}'

kubectl rollout restart -n argocd deploy devops-argocd-repo-server
kubectl rollout restart -n kubesphere-devops-system deploy devops-jenkins
echo "==================================Done.========================================="


# 安装gitlab
# 安装证书
# cat <<EOF | kubectl apply -f -
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: aliyun-secret
#   namespace: gitlab-system
# type: Opaque
# stringData:
#   access-key: `cat ./owner.config | awk '{if($1 == "DNS01_KEY") print $2}'`
#   secret-key: `cat ./owner.config | awk '{if($1 == "DNS01_SECRET") print $2}'`

# ---
# apiVersion: cert-manager.io/v1
# kind: Issuer
# metadata:
#   namespace: gitlab-system
#   name: letsencrypt
# spec:
#   acme:
#     email: developer@ouxxa.com
#     server: https://acme-v02.api.letsencrypt.org/directory
#     privateKeySecretRef:
#       name: letsencrypt-account-key
#     solvers:
#     - dns01:
#         webhook:
#           groupName: acme.micrc.io
#           solverName: alidns-solver
#           config:
#             accessTokenSecretRef:
#               name: aliyun-secret
#               key: access-key
#             secretKeySecretRef:
#               name: aliyun-secret
#               key: secret-key
# EOF

# # 安装
# kubectl create namespace gitlab-system
# helm repo add gitlab https://charts.gitlab.io
# helm repo update

# kubectl apply -f ./config/devops/gitlab-cert.yaml

# helm upgrade --install gitlab gitlab/gitlab --namespace gitlab-system \
#   --version $GITLAB_VERSION \
#   -f ./config/devops/gitlab-values.yaml


echo "######################################"
echo "## Successful -- 完成."
echo "## 在kubesphere ‘控制台’ 的 ‘系统组件’ 确保所有组件正常运行后开始使用"
echo "######################################"
